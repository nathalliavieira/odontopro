// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade) 

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("sessions")
}

model Reminder {
  id String @id @default(uuid())
  description String

  userId String
  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Appointment {
  id String @id @default(uuid())
  name String //Nome do paciente
  email String
  phone String
  appointmentDate DateTime //Data do agendamento
  time String //horario escolhido

  serviceId String //id do servi√ßo agendado
  service Service @relation(fields: [serviceId], references: [id])

  userId String //Id da clinica (user)
  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id String @id @default(uuid())
  name String
  price Int
  duration Int
  status Boolean @default(true)

  userId String
  user User @relation(fields: [userId], references: [id])

  appointment Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Plan {
  BASIC
  PROFESSIONAL
}

model Subscription {
  id String @id @default(uuid())
  status String
  plan Plan
  priceId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique
  user User @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  address       String?   @default("")
  phone         String?   @default("")
  status        Boolean   @default(true)
  timeZone      String?
  stripe_customer_id String?
  times String[] @default([])

  subscription Subscription? //Relacionamento aonde o user pode ter uma assinatura apenas
  services Service[]
  reminders Reminder[]

  accounts      Account[]
  sessions      Session[]

  appointments Appointment[]

  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("users")
}

model Authenticator {
  credentialID String @unique
  userId String
  providerAccountId String
  credentialPublicKey String
  counter Int
  credentialDeviceType String
  credentialBackedUp Boolean
  transports String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}